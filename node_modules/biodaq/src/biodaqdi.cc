#include <vector>
#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <node.h>
#include <node_buffer.h>
#include <node_object_wrap.h>
#include <v8.h>
#include <uv.h>
#include "compatibility.h"
#include "bdaqctrl.h"

using namespace Automation::BDaq;
using namespace v8;

////////////////////////////////////////////////////////////////////////////

typedef struct {
	Persistent<Object> context;
	int32 srcNum;
	int32 length;
	int32 portCount;
	uint8_t	portData[MAX_DIO_PORT_COUNT];
} UVEventEmitterCallbackData;

typedef struct {
	uv_async_t di_snap_event_handle;	
} UVEventEmitterHandlers;

////////////////////////////////////////////////////////////////////////////

void wrap_pointer_cb(char *data, void *hint) {
  
};

Handle<Value> WrapPointer(void *ptr, size_t length) {
  HandleScope scope;
  void *user_data = NULL;
  node::Buffer *buffer = node::Buffer::New((char *)ptr, length, wrap_pointer_cb, user_data);
  return scope.Close(buffer->handle_);
};

Handle<Value> WrapPointer(void *ptr) {
  return WrapPointer(ptr, 0);
};

static void di_snap_event_cb_emitter(uv_async_t* handle, int status) {  
	HandleScope scope;
	UVEventEmitterCallbackData *data = static_cast<UVEventEmitterCallbackData *>(handle->data);
	handle->data = NULL;

	Handle<Value> argv[3];
	Handle<Array> portData = Array::New();

	argv[0] = Integer::New(data->srcNum);
	argv[1] = Integer::New(data->length);
	argv[2] = portData;
	
	for (int index = 0; index < data->portCount; index++) {
		portData->Set(index, Number::New(data->portData[index]));
	}

	node::MakeCallback(data->context, "diPortChangeStateEvent", 3, argv); 
	free(data);
}

class StatusChangeHandler : public DiSnapEventListener
{
public:	
	UVEventEmitterHandlers *emitterHandlers;
	InstantDiCtrl *instantDiCtrl;
	Persistent<Object> emitterContext;	

	virtual void BDAQCALL DiSnapEvent(void *sender, DiSnapEventArgs *args) {	
		if (this->emitterHandlers != NULL) {
			UVEventEmitterCallbackData *data = new UVEventEmitterCallbackData();
			data->context = emitterContext;
			data->length = args->Length;
			data->srcNum = args->SrcNum;
			data->portCount = instantDiCtrl->getPortCount();
			memcpy(data->portData, args->PortData, MAX_DIO_PORT_COUNT);
			
			this->emitterHandlers->di_snap_event_handle.data = data;
			uv_async_send(&this->emitterHandlers->di_snap_event_handle);			
		}		
	}
};

////////////////////////////////////////////////////////////////////////////
// InstantDiCtrl methods

Handle<Value> ReadPort(const Arguments& args) {
	HandleScope scope;	
	InstantDiCtrl *instantDiCtrl = (InstantDiCtrl *)args.Holder()->GetHiddenValue(String::NewSymbol("Instance"))->ToObject()->GetIndexedPropertiesExternalArrayData();

	if (instantDiCtrl) {
		if (args.Length() < 1) {
			ThrowException(Exception::TypeError(String::New("Not specified function arguments")));
			return scope.Close(Undefined());
		}
		
		if (!args[0]->IsNumber()) {
			ThrowException(Exception::TypeError(String::New("Wrong arguments")));
			return scope.Close(Undefined());
		}

		int32 portNumber = args[0]->IntegerValue();

		if (portNumber < 0 || portNumber >= instantDiCtrl->getPortCount()) {
			ThrowException(Exception::TypeError(String::New("Wrong arguments")));
			return scope.Close(Undefined());
		}
		
		uint8_t data = 0;
		ErrorCode error = instantDiCtrl->Read(portNumber, data);

		if (BioFailed(error)) {			
			char errorString[255] = {0};
			sprintf(errorString, "Error occured (Code: Ox%X)", error);
			ThrowException(Exception::TypeError(String::New(errorString)));
			return scope.Close(Undefined());
		}
				
		return scope.Close(Number::New(data));
	} else {
		ThrowException(Exception::TypeError(String::New("Can't get InstantDiCtrl instance")));
		return scope.Close(Undefined());
	}
	return scope.Close(Undefined());
}

Handle<Value> ReadPortRange(const Arguments& args) {
	HandleScope scope;	
	InstantDiCtrl *instantDiCtrl = (InstantDiCtrl *)args.Holder()->GetHiddenValue(String::NewSymbol("Instance"))->ToObject()->GetIndexedPropertiesExternalArrayData();

	if (instantDiCtrl) {
		if (args.Length() < 2) {
			ThrowException(Exception::TypeError(String::New("Not specified function arguments")));
			return scope.Close(Undefined());
		}
				
		if (!args[0]->IsNumber() || !args[1]->IsNumber()) {
			ThrowException(Exception::TypeError(String::New("Wrong arguments")));
			return scope.Close(Undefined());
		}

		int32 portNumber = args[0]->IntegerValue();
		int32 portCount = args[1]->IntegerValue();

		if (portNumber < 0 || portCount < 1 || portNumber + portCount > instantDiCtrl->getPortCount()) {
			ThrowException(Exception::TypeError(String::New("Wrong arguments")));
			return scope.Close(Undefined());
		}

		uint8_t *data = (uint8_t *)malloc(portCount);
		ErrorCode error = instantDiCtrl->Read(args[0]->IntegerValue(), portCount, data);

		if (BioFailed(error)) {		
			free(data);
			char errorString[255] = {0};
			sprintf(errorString, "Error occured (Code: Ox%X)", error);
			ThrowException(Exception::TypeError(String::New(errorString)));
			return scope.Close(Undefined());
		}

		Handle<Array> dataArray = Array::New();

		for (int i = 0; i < portCount; i++) {
			dataArray->Set(i, Number::New(data[i]));
		}

		free(data);
		return scope.Close(dataArray);
	} else {
		ThrowException(Exception::TypeError(String::New("Can't get InstantDiCtrl instance")));
		return scope.Close(Undefined());
	}
	return scope.Close(Undefined());
}

Handle<Value> Subscribe(const Arguments& args) {
	HandleScope scope;	
	InstantDiCtrl *instantDiCtrl = (InstantDiCtrl *)args.Holder()->GetHiddenValue(String::NewSymbol("Instance"))->ToObject()->GetIndexedPropertiesExternalArrayData();

	if (instantDiCtrl) {
		if (args.Length() < 1) {
			ThrowException(Exception::TypeError(String::New("Not specified function arguments")));
			return scope.Close(Undefined());
		}
		
		if (!args[0]->IsArray()) {
			ThrowException(Exception::TypeError(String::New("Wrong arguments")));
			return scope.Close(Undefined());
		}

		ICollection<DiCosintPort>* diCosintPorts = instantDiCtrl->getDiCosintPorts();
		Local<Array> maskArr = Array::Cast(*args[0]);

		for (int index = 0, length = maskArr->Length(), portCount = instantDiCtrl->getPortCount(); index < length  && index < portCount; index++) {
			Local<Value> mask = maskArr->Get(index);
			if (mask->IsNumber()) {
				diCosintPorts->getItem(index).setMask(mask->IntegerValue());
			}
		}
			
		instantDiCtrl->SnapStart();
	} else {
		ThrowException(Exception::TypeError(String::New("Can't get InstantDiCtrl instance")));
		return scope.Close(Undefined());
	}

	return scope.Close(Undefined());
}

Handle<Value> Unsubscribe(const Arguments& args) {
	HandleScope scope;	
	InstantDiCtrl *instantDiCtrl = (InstantDiCtrl *)args.Holder()->GetHiddenValue(String::NewSymbol("Instance"))->ToObject()->GetIndexedPropertiesExternalArrayData();

	if (instantDiCtrl) {
		instantDiCtrl->SnapStop();
	} else {
		ThrowException(Exception::TypeError(String::New("Can't get InstantDiCtrl instance")));
		return scope.Close(Undefined());
	}

	return scope.Close(Undefined());
}

Handle<Value> Dispose(const Arguments& args) {
	HandleScope scope;	
	InstantDiCtrl *instantDiCtrl = (InstantDiCtrl *)args.Holder()->GetHiddenValue(String::NewSymbol("Instance"))->ToObject()->GetIndexedPropertiesExternalArrayData();

	if (instantDiCtrl) {
		instantDiCtrl->Dispose();
		args.Holder()->DeleteHiddenValue(String::NewSymbol("Instance"));
	} else {
		ThrowException(Exception::TypeError(String::New("Can't get InstantDiCtrl instance")));
		return scope.Close(Undefined());
	}

	return scope.Close(Undefined());
}

Handle<Value> createInstantDiCtrl(const Arguments& args) {
	HandleScope scope;

	if (args.Length() < 1) {
		ThrowException(Exception::TypeError(String::New("Not specified function arguments")));
		return scope.Close(Undefined());
	}

	if (!args[0]->IsString()) {
		ThrowException(Exception::TypeError(String::New("Wrong arguments")));
		return scope.Close(Undefined());
	}

	InstantDiCtrl *instantDiCtrl = AdxInstantDiCtrlCreate();

	if (instantDiCtrl) {		
		DeviceInformation deviceInfo((LPCWSTR)*String::Value(args[0]->ToString()));
		ErrorCode error = instantDiCtrl->setSelectedDevice(deviceInfo);

		if (BioFailed(error)) {			
			char errorString[255] = {0};
			sprintf(errorString, "Error occured (Code: Ox%X)", error);
			
			instantDiCtrl->Dispose();

			ThrowException(Exception::TypeError(String::New(errorString)));
			return scope.Close(Undefined());
		}

		UVEventEmitterHandlers *emitterHandlers = new UVEventEmitterHandlers();		
		Persistent<Object> emitterContext = Persistent<Object>::New(Object::New()); 

		uv_async_init(uv_default_loop(), &emitterHandlers->di_snap_event_handle, di_snap_event_cb_emitter);

		StatusChangeHandler *statusChangeHandler = new StatusChangeHandler();		
		statusChangeHandler->emitterHandlers = emitterHandlers;
		statusChangeHandler->emitterContext = emitterContext;
		statusChangeHandler->instantDiCtrl = instantDiCtrl;
		instantDiCtrl->addChangeOfStateListener(*statusChangeHandler);
			
		Handle<Object> object = Object::New();		
		object->SetHiddenValue(String::NewSymbol("Instance"), WrapPointer(instantDiCtrl, sizeof(InstantDiCtrl)));
		object->SetHiddenValue(String::NewSymbol("EventEmitterHandlers"), WrapPointer(emitterHandlers, sizeof(UVEventEmitterHandlers)));
		object->SetHiddenValue(String::NewSymbol("StatusChangeHandler"), WrapPointer(statusChangeHandler, sizeof(StatusChangeHandler)));
		object->Set(String::New("event"), emitterContext);
		object->Set(String::NewSymbol("Dispose"), FunctionTemplate::New(Dispose)->GetFunction());
		object->Set(String::NewSymbol("ReadPort"), FunctionTemplate::New(ReadPort)->GetFunction());	
		object->Set(String::NewSymbol("ReadPortRange"), FunctionTemplate::New(ReadPortRange)->GetFunction());
		object->Set(String::NewSymbol("Subscribe"), FunctionTemplate::New(Subscribe)->GetFunction());
		object->Set(String::NewSymbol("Unsubscribe"), FunctionTemplate::New(Unsubscribe)->GetFunction());
		
		return scope.Close(object);
	} else {
		ThrowException(Exception::TypeError(String::New("Can't create InstantDiCtrl instance")));
		return scope.Close(Undefined());
	}
		
	return scope.Close(Undefined());
}

////////////////////////////////////////////////////////////////////////////

void Initialize(Handle<Object> target) {
	target->Set(String::NewSymbol("createInstantDiCtrl"),
		FunctionTemplate::New(createInstantDiCtrl)->GetFunction());
}

NODE_MODULE(biodaqdi, Initialize)
