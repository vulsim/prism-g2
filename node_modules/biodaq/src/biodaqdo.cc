#include <vector>
#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <node.h>
#include <node_buffer.h>
#include <node_object_wrap.h>
#include <v8.h>
#include <uv.h>
#include "compatibility.h"
#include "bdaqctrl.h"

using namespace Automation::BDaq;
using namespace v8;

////////////////////////////////////////////////////////////////////////////

typedef struct {
	Persistent<Object> context;
	int32 srcNum;
	int32 length;
	int32 portCount;
	uint8_t	portData[MAX_DIO_PORT_COUNT];
} UVEventEmitterCallbackData;

typedef struct {
	uv_async_t di_snap_event_handle;	
} UVEventEmitterHandlers;

////////////////////////////////////////////////////////////////////////////

void wrap_pointer_cb(char *data, void *hint) {
  
};

Handle<Value> WrapPointer(void *ptr, size_t length) {
  HandleScope scope;
  void *user_data = NULL;
  node::Buffer *buffer = node::Buffer::New((char *)ptr, length, wrap_pointer_cb, user_data);
  return scope.Close(buffer->handle_);
};

Handle<Value> WrapPointer(void *ptr) {
  return WrapPointer(ptr, 0);
};

////////////////////////////////////////////////////////////////////////////
// InstantDoCtrl methods

Handle<Value> ReadPort(const Arguments& args) {
	HandleScope scope;	
	InstantDoCtrl *instantDoCtrl = (InstantDoCtrl *)args.Holder()->GetHiddenValue(String::NewSymbol("Instance"))->ToObject()->GetIndexedPropertiesExternalArrayData();

	if (instantDoCtrl) {
		if (args.Length() < 1) {
			ThrowException(Exception::TypeError(String::New("Not specified function arguments")));
			return scope.Close(Undefined());
		}
		
		if (!args[0]->IsNumber()) {
			ThrowException(Exception::TypeError(String::New("Wrong arguments")));
			return scope.Close(Undefined());
		}

		int32 portNumber = args[0]->IntegerValue();

		if (portNumber < 0 || portNumber >= instantDoCtrl->getPortCount()) {
			ThrowException(Exception::TypeError(String::New("Wrong arguments")));
			return scope.Close(Undefined());
		}
		
		uint8_t data = 0;
		ErrorCode error = instantDoCtrl->Read(portNumber, data);

		if (BioFailed(error)) {			
			char errorString[255] = {0};
			sprintf(errorString, "Error occured (Code: Ox%X)", error);
			ThrowException(Exception::TypeError(String::New(errorString)));
			return scope.Close(Undefined());
		}
				
		return scope.Close(Number::New(data));
	} else {
		ThrowException(Exception::TypeError(String::New("Can't get InstantDoCtrl instance")));
		return scope.Close(Undefined());
	}
	return scope.Close(Undefined());
}

Handle<Value> ReadPortRange(const Arguments& args) {
	HandleScope scope;	
	InstantDoCtrl *instantDoCtrl = (InstantDoCtrl *)args.Holder()->GetHiddenValue(String::NewSymbol("Instance"))->ToObject()->GetIndexedPropertiesExternalArrayData();

	if (instantDoCtrl) {
		if (args.Length() < 2) {
			ThrowException(Exception::TypeError(String::New("Not specified function arguments")));
			return scope.Close(Undefined());
		}
				
		if (!args[0]->IsNumber() || !args[1]->IsNumber()) {
			ThrowException(Exception::TypeError(String::New("Wrong arguments")));
			return scope.Close(Undefined());
		}

		int32 portNumber = args[0]->IntegerValue();
		int32 portCount = args[1]->IntegerValue();

		if (portNumber < 0 || portCount < 1 || portNumber + portCount > instantDoCtrl->getPortCount()) {
			ThrowException(Exception::TypeError(String::New("Wrong arguments")));
			return scope.Close(Undefined());
		}

		uint8_t *data = (uint8_t *)malloc(portCount);
		ErrorCode error = instantDoCtrl->Read(args[0]->IntegerValue(), portCount, data);

		if (BioFailed(error)) {		
			free(data);
			char errorString[255] = {0};
			sprintf(errorString, "Error occured (Code: Ox%X)", error);
			ThrowException(Exception::TypeError(String::New(errorString)));
			return scope.Close(Undefined());
		}

		Handle<Array> dataArray = Array::New();

		for (int i = 0; i < portCount; i++) {
			dataArray->Set(i, Number::New(data[i]));
		}

		free(data);
		return scope.Close(dataArray);
	} else {
		ThrowException(Exception::TypeError(String::New("Can't get InstantDoCtrl instance")));
		return scope.Close(Undefined());
	}
	return scope.Close(Undefined());
}

Handle<Value> WritePort(const Arguments& args) {
	HandleScope scope;	
	InstantDoCtrl *instantDoCtrl = (InstantDoCtrl *)args.Holder()->GetHiddenValue(String::NewSymbol("Instance"))->ToObject()->GetIndexedPropertiesExternalArrayData();

	if (instantDoCtrl) {
		if (args.Length() < 2) {
			ThrowException(Exception::TypeError(String::New("Not specified function arguments")));
			return scope.Close(Undefined());
		}
		
		if (!args[0]->IsNumber() || !args[1]->IsNumber()) {
			ThrowException(Exception::TypeError(String::New("Wrong arguments")));
			return scope.Close(Undefined());
		}

		int32 portNumber = args[0]->IntegerValue();

		if (portNumber < 0 || portNumber >= instantDoCtrl->getPortCount()) {
			ThrowException(Exception::TypeError(String::New("Wrong arguments")));
			return scope.Close(Undefined());
		}
		
		uint8_t data = args[1]->IntegerValue();
		ErrorCode error = instantDoCtrl->Write(portNumber, data);

		if (BioFailed(error)) {			
			char errorString[255] = {0};
			sprintf(errorString, "Error occured (Code: Ox%X)", error);
			ThrowException(Exception::TypeError(String::New(errorString)));
			return scope.Close(Undefined());
		}
				
		return scope.Close(Number::New(data));
	} else {
		ThrowException(Exception::TypeError(String::New("Can't get InstantDoCtrl instance")));
		return scope.Close(Undefined());
	}
	return scope.Close(Undefined());
}

Handle<Value> Dispose(const Arguments& args) {
	HandleScope scope;	
	InstantDoCtrl *instantDoCtrl = (InstantDoCtrl *)args.Holder()->GetHiddenValue(String::NewSymbol("Instance"))->ToObject()->GetIndexedPropertiesExternalArrayData();

	if (instantDoCtrl) {
		instantDoCtrl->Dispose();
		args.Holder()->DeleteHiddenValue(String::NewSymbol("Instance"));
	} else {
		ThrowException(Exception::TypeError(String::New("Can't get InstantDoCtrl instance")));
		return scope.Close(Undefined());
	}

	return scope.Close(Undefined());
}

Handle<Value> createInstantDoCtrl(const Arguments& args) {
	HandleScope scope;

	if (args.Length() < 1) {
		ThrowException(Exception::TypeError(String::New("Not specified function arguments")));
		return scope.Close(Undefined());
	}

	if (!args[0]->IsString()) {
		ThrowException(Exception::TypeError(String::New("Wrong arguments")));
		return scope.Close(Undefined());
	}

	InstantDoCtrl *instantDoCtrl = AdxInstantDoCtrlCreate();

	if (instantDoCtrl) {		
		DeviceInformation deviceInfo((LPCWSTR)*String::Value(args[0]->ToString()));
		ErrorCode error = instantDoCtrl->setSelectedDevice(deviceInfo);

		if (BioFailed(error)) {			
			char errorString[255] = {0};
			sprintf(errorString, "Error occured (Code: Ox%X)", error);
			
			instantDoCtrl->Dispose();

			ThrowException(Exception::TypeError(String::New(errorString)));
			return scope.Close(Undefined());
		}

		Handle<Object> object = Object::New();		
		object->SetHiddenValue(String::NewSymbol("Instance"), WrapPointer(instantDoCtrl, sizeof(InstantDoCtrl)));
		object->Set(String::NewSymbol("Dispose"), FunctionTemplate::New(Dispose)->GetFunction());
		object->Set(String::NewSymbol("ReadPort"), FunctionTemplate::New(ReadPort)->GetFunction());	
		object->Set(String::NewSymbol("ReadPortRange"), FunctionTemplate::New(ReadPortRange)->GetFunction());
		object->Set(String::NewSymbol("WritePort"), FunctionTemplate::New(WritePort)->GetFunction());
		
		return scope.Close(object);
	} else {
		ThrowException(Exception::TypeError(String::New("Can't create InstantDoCtrl instance")));
		return scope.Close(Undefined());
	}
		
	return scope.Close(Undefined());
}

////////////////////////////////////////////////////////////////////////////

void Initialize(Handle<Object> target) {
	target->Set(String::NewSymbol("createInstantDoCtrl"),
		FunctionTemplate::New(createInstantDoCtrl)->GetFunction());
}

NODE_MODULE(biodaqdo, Initialize)
